<?xml version="1.0" encoding="UTF-8"?>
<DEFECTS>
  <DEFECT>
    <SFA>
      <FILEPATH>c:\users\jacob\desktop\extremediffusion1d\cdiffusion</FILEPATH>
      <FILENAME>cdiffusion.cpp</FILENAME>
      <LINE>78</LINE>
      <COLUMN>66</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '*' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '*' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>floatEvolveTimeStep</FUNCTION>
    <DECORATED>?floatEvolveTimeStep@@YA?AV?$vector@HV?$allocator@H@std@@@std@@V12@V?$vector@MV?$allocator@M@std@@@2@H@Z</DECORATED>
    <FUNCLINE>35</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>c:\manager\vcpkg\installed\x86-windows\include\boost\random</FILEPATH>
      <FILENAME>binomial_distribution.hpp</FILENAME>
      <LINE>130</LINE>
      <COLUMN>4</COLUMN>
    </SFA>
    <DEFECTCODE>26495</DEFECTCODE>
    <DESCRIPTION>Variable 'boost::random::binomial_distribution&lt;int,double&gt;::m' is uninitialized. Always initialize a member variable (type.6).</DESCRIPTION>
    <FUNCTION>boost::random::binomial_distribution&lt;int,double&gt;::{ctor}</FUNCTION>
    <DECORATED>??0?$binomial_distribution@HN@random@boost@@QAE@HN@Z</DECORATED>
    <FUNCLINE>130</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>c:\manager\vcpkg\installed\x86-windows\include\boost\random</FILEPATH>
      <FILENAME>binomial_distribution.hpp</FILENAME>
      <LINE>130</LINE>
      <COLUMN>4</COLUMN>
    </SFA>
    <DEFECTCODE>26495</DEFECTCODE>
    <DESCRIPTION>Variable 'boost::random::binomial_distribution&lt;int,double&gt;::_u' is uninitialized. Always initialize a member variable (type.6).</DESCRIPTION>
    <FUNCTION>boost::random::binomial_distribution&lt;int,double&gt;::{ctor}</FUNCTION>
    <DECORATED>??0?$binomial_distribution@HN@random@boost@@QAE@HN@Z</DECORATED>
    <FUNCLINE>130</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>c:\manager\vcpkg\installed\x86-windows\include\boost\random</FILEPATH>
      <FILENAME>binomial_distribution.hpp</FILENAME>
      <LINE>284</LINE>
      <COLUMN>27</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '+' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '+' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>boost::random::binomial_distribution&lt;int,double&gt;::init</FUNCTION>
    <DECORATED>?init@?$binomial_distribution@HN@random@boost@@AAEXXZ</DECORATED>
    <FUNCLINE>270</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>c:\manager\vcpkg\installed\x86-windows\include\boost\random</FILEPATH>
      <FILENAME>binomial_distribution.hpp</FILENAME>
      <LINE>374</LINE>
      <COLUMN>24</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '+' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '+' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>boost::random::binomial_distribution&lt;int,double&gt;::invert</FUNCTION>
    <DECORATED>??$invert@V?$mersenne_twister_engine@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$0PPPPPPPP@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0GMAHIJGF@@std@@@?$binomial_distribution@HN@random@boost@@ABEHHNAAV?$mersenne_twister_engine@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$0PPPPPPPP@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0GMAHIJGF@@std@@@Z</DECORATED>
    <FUNCLINE>370</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>c:\manager\vcpkg\installed\x86-windows\include\boost\random</FILEPATH>
      <FILENAME>binomial_distribution.hpp</FILENAME>
      <LINE>352</LINE>
      <COLUMN>46</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '+' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '+' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>boost::random::binomial_distribution&lt;int,double&gt;::generate</FUNCTION>
    <DECORATED>??$generate@V?$mersenne_twister_engine@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$0PPPPPPPP@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0GMAHIJGF@@std@@@?$binomial_distribution@HN@random@boost@@ABEHAAV?$mersenne_twister_engine@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$0PPPPPPPP@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0GMAHIJGF@@std@@@Z</DECORATED>
    <FUNCLINE>297</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>c:\manager\vcpkg\installed\x86-windows\include\boost\random</FILEPATH>
      <FILENAME>binomial_distribution.hpp</FILENAME>
      <LINE>357</LINE>
      <COLUMN>57</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '+' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '+' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>boost::random::binomial_distribution&lt;int,double&gt;::generate</FUNCTION>
    <DECORATED>??$generate@V?$mersenne_twister_engine@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$0PPPPPPPP@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0GMAHIJGF@@std@@@?$binomial_distribution@HN@random@boost@@ABEHAAV?$mersenne_twister_engine@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$0PPPPPPPP@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0GMAHIJGF@@std@@@Z</DECORATED>
    <FUNCLINE>297</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>c:\manager\vcpkg\installed\x86-windows\include\boost\random</FILEPATH>
      <FILENAME>binomial_distribution.hpp</FILENAME>
      <LINE>356</LINE>
      <COLUMN>31</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '+' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '+' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>boost::random::binomial_distribution&lt;int,double&gt;::generate</FUNCTION>
    <DECORATED>??$generate@V?$mersenne_twister_engine@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$0PPPPPPPP@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0GMAHIJGF@@std@@@?$binomial_distribution@HN@random@boost@@ABEHAAV?$mersenne_twister_engine@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$0PPPPPPPP@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0GMAHIJGF@@std@@@Z</DECORATED>
    <FUNCLINE>297</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>c:\manager\vcpkg\installed\x86-windows\include\boost\random</FILEPATH>
      <FILENAME>binomial_distribution.hpp</FILENAME>
      <LINE>263</LINE>
      <COLUMN>45</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '+' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '+' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>boost::random::binomial_distribution&lt;int,double&gt;::fc</FUNCTION>
    <DECORATED>?fc@?$binomial_distribution@HN@random@boost@@CANH@Z</DECORATED>
    <FUNCLINE>259</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>c:\manager\vcpkg\installed\x86-windows\include\boost\random\detail</FILEPATH>
      <FILENAME>int_float_pair.hpp</FILENAME>
      <LINE>77</LINE>
      <COLUMN>68</COLUMN>
    </SFA>
    <DEFECTCODE>6297</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow:  32-bit value is shifted, then cast to 64-bit value.  Results might not be an expected value.</DESCRIPTION>
    <FUNCTION>boost::random::detail::generate_int_float_pair</FUNCTION>
    <DECORATED>??$generate_int_float_pair@N$07V?$mersenne_twister_engine@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$0PPPPPPPP@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0GMAHIJGF@@std@@@detail@random@boost@@YA?AU?$pair@NH@std@@AAV?$mersenne_twister_engine@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$0PPPPPPPP@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0GMAHIJGF@@4@U?$integral_constant@_N$00@2@@Z</DECORATED>
    <FUNCLINE>51</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>c:\manager\vcpkg\installed\x86-windows\include\boost\random\detail</FILEPATH>
      <FILENAME>int_float_pair.hpp</FILENAME>
      <LINE>87</LINE>
      <COLUMN>53</COLUMN>
    </SFA>
    <DEFECTCODE>6297</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow:  32-bit value is shifted, then cast to 64-bit value.  Results might not be an expected value.</DESCRIPTION>
    <FUNCTION>boost::random::detail::generate_int_float_pair</FUNCTION>
    <DECORATED>??$generate_int_float_pair@N$07V?$mersenne_twister_engine@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$0PPPPPPPP@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0GMAHIJGF@@std@@@detail@random@boost@@YA?AU?$pair@NH@std@@AAV?$mersenne_twister_engine@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$0PPPPPPPP@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0GMAHIJGF@@4@U?$integral_constant@_N$00@2@@Z</DECORATED>
    <FUNCLINE>51</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>c:\manager\vcpkg\installed\x86-windows\include\boost\random\detail</FILEPATH>
      <FILENAME>int_float_pair.hpp</FILENAME>
      <LINE>94</LINE>
      <COLUMN>70</COLUMN>
    </SFA>
    <DEFECTCODE>6297</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow:  32-bit value is shifted, then cast to 64-bit value.  Results might not be an expected value.</DESCRIPTION>
    <FUNCTION>boost::random::detail::generate_int_float_pair</FUNCTION>
    <DECORATED>??$generate_int_float_pair@N$07V?$mersenne_twister_engine@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$0PPPPPPPP@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0GMAHIJGF@@std@@@detail@random@boost@@YA?AU?$pair@NH@std@@AAV?$mersenne_twister_engine@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$0PPPPPPPP@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0GMAHIJGF@@4@U?$integral_constant@_N$00@2@@Z</DECORATED>
    <FUNCLINE>51</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>c:\manager\vcpkg\installed\x86-windows\include\boost\random\detail</FILEPATH>
      <FILENAME>int_float_pair.hpp</FILENAME>
      <LINE>77</LINE>
      <COLUMN>68</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '&lt;&lt;' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '&lt;&lt;' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>boost::random::detail::generate_int_float_pair</FUNCTION>
    <DECORATED>??$generate_int_float_pair@N$07V?$mersenne_twister_engine@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$0PPPPPPPP@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0GMAHIJGF@@std@@@detail@random@boost@@YA?AU?$pair@NH@std@@AAV?$mersenne_twister_engine@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$0PPPPPPPP@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0GMAHIJGF@@4@U?$integral_constant@_N$00@2@@Z</DECORATED>
    <FUNCLINE>51</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>c:\manager\vcpkg\installed\x86-windows\include\boost\random\detail</FILEPATH>
      <FILENAME>int_float_pair.hpp</FILENAME>
      <LINE>87</LINE>
      <COLUMN>53</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '&lt;&lt;' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '&lt;&lt;' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>boost::random::detail::generate_int_float_pair</FUNCTION>
    <DECORATED>??$generate_int_float_pair@N$07V?$mersenne_twister_engine@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$0PPPPPPPP@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0GMAHIJGF@@std@@@detail@random@boost@@YA?AU?$pair@NH@std@@AAV?$mersenne_twister_engine@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$0PPPPPPPP@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0GMAHIJGF@@4@U?$integral_constant@_N$00@2@@Z</DECORATED>
    <FUNCLINE>51</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>c:\manager\vcpkg\installed\x86-windows\include\boost\random\detail</FILEPATH>
      <FILENAME>int_float_pair.hpp</FILENAME>
      <LINE>94</LINE>
      <COLUMN>70</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '&lt;&lt;' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '&lt;&lt;' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>boost::random::detail::generate_int_float_pair</FUNCTION>
    <DECORATED>??$generate_int_float_pair@N$07V?$mersenne_twister_engine@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$0PPPPPPPP@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0GMAHIJGF@@std@@@detail@random@boost@@YA?AU?$pair@NH@std@@AAV?$mersenne_twister_engine@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$0PPPPPPPP@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0GMAHIJGF@@4@U?$integral_constant@_N$00@2@@Z</DECORATED>
    <FUNCLINE>51</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
</DEFECTS>