import BarraquandCorwin as bc
import numpy as np

# Initial number of particles
numThings = 100e10
# Max value of N
maxN = 110e10
# Number of times to run for each N
numRuns = 100

# Create empty arrays to store information
allThings = []
allTimes=[]
allVarsL=[]
allVarsR=[]

# Loop through until we reach the max N
while numThings <= maxN:
    # Find max time based on N
    maxTime = int(np.log(numThings)**2)

    # Create empty array to store variances for the edges
    variances = []

    # Create arrays to track each edge
    leftEdge = []
    rightEdge = []
    # Repeat numRuns times
    for x in range(numRuns):
        # Create array of edges
        edges = bc.floatRunFixedTime(maxTime,bc.einsteinBias,numThings)
        # Separate arrays for left and right edges
        leftEdge.append(edges[0])
        rightEdge.append(edges[1])

    # Calculate variance of left and right edges
    varLeft = np.asarray(np.var(leftEdge, axis=1))
    varRight = np.asarray(np.var(rightEdge, axis=1))
        
    # Add current N to array of Ns
    allThings.append(numThings)

    # Add current time array to array of all times (not confusing at all)
    allTimes.append(np.arange(1,maxTime+1,1))

    # Add variances for this N to array of variances
    allVarsL.append(varLeft)
    allVarsR.append(varRight)

    # Next N
    numThings += 1e10


    
#print('All things:')
#print(allThings)
#print('')
#print('All times:')
#print(allTimes)
print('')
print('All variances:')
print(np.vstack(allVarsL))
print(np.vstack(allVarsR))
